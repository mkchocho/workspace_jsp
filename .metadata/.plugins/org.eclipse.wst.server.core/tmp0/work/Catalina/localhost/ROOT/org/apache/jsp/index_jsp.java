/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.73
 * Generated at: 2023-05-12 07:43:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	//스크립틀릿 - 자바땅 자바코드를 사용할 수 있다. -변수와 메서드
	//스크립틀릿 안에 선언된 변수는 모두 지변이다.
	//변수의 초기화(위치 선택할 수 있니?)를 할 수 있다. - 기초가 아니다 - 해본자
	//변수 선언 - 타입 변수명 = 값;
	//여기에 쓰면 톰캣 서버가 실행한다
	//실행한 결과를 html문서로 내려 보낸다. (클라아인트 입장에서 다운로드)
	//이미 결정 되었다. - 정적페이지가 다운로드 되었다. 된 것이다.
	//이미 결정되었다는 무슨 말일까?
	//다운로드가 되었다 - 브라우저측(클라이언트)에 
	//JSP(Java Server Page) => java와 html 섞어쓰기
	//JSP라고 쓰고 html이라고 읽는다 -> jsp의 mime type이 text/html이다
	//파일을 저장한 확장자는 의미없다 (mime type이 html -> 브라우저로부터 html 취급을 받는다)
	//reactjs-html과 javascript 섞어쓰기
	//응답페이지 처리하기
	

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- \r\n");
      out.write("html 땅\r\n");
      out.write("문자열은 인라인 요소(<-> 블록 요소 : 자체 크기가 있음. 줄바꿈)\r\n");
      out.write(" -->\r\n");
      out.write("Tomcat Server Start!!!\r\n");
      out.write("<br>\r\n");
 String name=" 이순신"; 
      out.write("<!-- 대입연산자-오른쪽에 있는 값을 왼쪽에 대입 해주세요. 주의 : 같은지를 묻는게 아니라...  \r\n");
      out.write("								if(1==1) if(1===1타입까지도 같니 : js에서)-->\r\n");
      out.write("<!-- 변수 out은 내장객체라서 인스턴스화 없이도 즉시 사용가능함. 톰캣이 제공해줌 -->\r\n");
 out.print(name); 
      out.write("<!-- F12 -개발자센터- 이순신만 보인다 브라우저에 출력해줘-->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 익스프레션 : 괄호 안에 있는 값 -->\r\n");
      out.print( "강감찬" );
      out.write('\r');
      out.write('\n');
      out.print( 10);
      out.write("\r\n");
      out.write("\r\n");

	//이 있으면 개행처리, line skip 줄바꿈 
	 System.out.println("강감찬"); //콘솔에 출력할 때 사용함 - 컨벤션

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
