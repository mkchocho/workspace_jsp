<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">
	<bean id="default-handler-mapping"
		class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping" />
	<bean name="/di/hello.sp4" class="com.di.HelloController" />
	<!-- 아래오는 name 속성은 SimpleUrlHandlerMapping이 아니라 BeanNameUrlHandlerMapping이 관여함-전처리함 -->
	<bean name="/di/insaList.sp4" class="com.di.ListController">
	<!--
	생성자 객체 주입법 - xml로 처리한다 - 그래서 자바가 아닌 언어와 비빌 때 사용함 - 인터페이스 구현
	setter 객체 주입법 - java로 처리함 - setter 메소드로 객체 주입을 받아낸다 : 반드시 DispatcherServlet 경유해야 가능 
	-->
	<property name="insaBean">
	<!-- java.util.List<?> -->
	<list>
		<value>Hi!!!</value>
		<value>Have a Good Time</value>
		<value>Have a Nice Day</value>
	</list>
	</property>
	</bean>
	<bean name ="/di/insaMap.sp4" class="com.di.MapController">
	<!-- bean태그에 클래스를 등록하면 스프링 컨테이너가 관리해줌
	필요할 때 대신 객체주입을 해줌 - 다 사용하면 자원을 회수해감
	ApplicationContext가 이런 일을 해줌 - 게으른 (필요할 때 주입)
	이른 인스턴스화 A a = new A();
	게으른 : A a = null;
	a = new A();
	upmu[0] = di
	upmu[1] = insaMap
	property : setter 메소드 이름을 결정함 
	bean 태그 안에 사용함 
	MapController 클래스에서 Map을 사용할게 - 의존관계에 있다
	의존관계에 있지만 개발자가 직접 인스턴스화 하지 않는다
	왜냐면 제어권이 넘어갔다
	그럼 아무것도 안해도 해주나요? 그렇지는 않고 직접 인스턴스화 하는 대신에 setter함
	 -->
		<property name="insaMapBean">
			<map>
				<entry>
					<key><value>one</value></key>
					<value>Hi</value>
				</entry>
				<entry>
					<key><value>two</value></key>
					<value>Have a good Time!!!</value>
				</entry>
				<entry>
					<key><value>three</value></key>
					<value>Have a nice Day!!!</value>
				</entry>
			</map>
		</property>
	</bean>
	<tx:annotation-driven />
	<bean id="url-mapping"
		class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="mappings">
			<props>
				<prop key="/qna/qnaList.sp4">qna-controller</prop>
				<prop key="/dept/deptList.sp4">dept-controller</prop>
			</props>
		</property>
	</bean>
	<!-- DeptController는 스프링컨테이너가 객체주입을 관리해줌[dependency injection] spring-servlet.xml 
		문서에 등록을 해두면 필요한 시점에 스프링엔진이 객체를 주입해줘서 NullPointerException이 발생하지 않음 xml을 모름 
		-> 자바코딩 -> 자바도 안 친함 -> 어노테이션을 제공하게 되었음 spring2.5 어노테이션 갯수가 제한적 -> spring3.0 
		어노테이션의 갯수가 늘어남 -> 서블릿 없이도 개발이 가능해짐 프레임워크는 잘 못하는 사람, 신입개발자를 배려함 - F/W - 일정을 
		관리 - 패널티 ReactJS -> NextJS 프레임워크 우대 -->
	<bean id="dept-controller" class="com.erp.DeptController">
		<property name="methodNameResolver" ref="dept-resolver" />
		<property name="deptLogic" ref="dept-logic" />
	</bean>
	<bean id="dept-resolver"
		class="org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver">
		<property name="mappings">
			<props>
				<prop key="/dept/deptList.sp4">deptList</prop>
			</props>
		</property>
	</bean>
	<bean id="qna-controller" class="com.erp.QnAController">
		<property name="methodNameResolver" ref="qna-resolver" />
		<!-- <property name="qnaLogic" ref="qna-logic" /> -->
	</bean>
	<bean id="qna-resolver"
		class="org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver">
		<property name="mappings">
			<props>
				<prop key="/qna/qnaList.sp4">qnaList</prop>
			</props>
		</property>
	</bean>

	
</beans>