*로컬과 web의 차이점 

*web이라고하면 기본적으로 생각해야할 점 → 네트워크

	*로컬
	자바를 처음 공부했을 때 만났던 것 : main
	main은 계속 필요한 것인가 ? 아님
	로컬에서 동작을한다는 것 → 실행파일(.exe)로 만들어지는 것

└web - URL(위치의 문제 : 컴파일을 어디에 작성할 것인가, 알고리즘)
위치는 어떤 일을 하는 순서, 논리적 사고 - 순서대로 위치를 정할 수 있는

더 많은 사람과 소통하기 위해서 main은 더 사용하지 않음
(쓰지 않는다고 해서 객체가 후지다거나 부정하는 것은 아님)

네트워크 안에서 소통을 하려면 필요한 것 '프로토콜'

http/https(security:보안→인증서를 가지고 있는 경우에만 사용할 수 있음)
프로토콜이 가지고 있는 특징
그중 한가지 : 상태가 유지되지 않음
의미 : 데이터, 상태가 변함 / 상태데 대한 관리가 중요함 - 코드를 통해서 관리
상태를 유지하는 게 중요함, 상태가 끊김? 연습할 때 상태가 끊어지는 것을 유지할 수 있도록 해야함

http프로토콜의 단점 : 뚝뚝 끊어짐 → 유지해야함 → 필요한 것 : API = 쿠키와 세션
쿠키와 세션을 다루기 위해서 변수를 배우는 것임
(가장 앞부분 변수선언을 배우는 이유)

[로그인상황을 예를들어]
로그인 화면(Veiw) id, pw (html의 영역)
	↓
사용자가 (로그인)요청 : URL을 사용 (후에 MVC를 공부)
	↓
로그인 요청할 때 사용되는 '브라우저' (브라우저의 역할 : 인터프리터)
(브라우저(.exe) 에서 사용되는 확장자(html) 
마킹? 브라우저에서 열린 태그와 태그로 마킹, CSS, JavaScript) 웹서비스를 구현하는데 기본으로 하는 3가지
└→그 다음 단계 .jsp (섞어쓰기) 예쁜 화면으로 구현하기 위해서 
특징 : 정적이다
	
--------유저인터페이스-----------
	사용자 화면에 보이는 단계
(MVC 패턴에서는 View계층이라고 말함)

	↓
주입을 받아야함, 스프링에서 나오는 부분 객체 주입
Tomcat이라는 WAS(Web Application Server)에
-전송 : 사용자의 id, pw
-단위테스트 위해 설치한 툴 : postman

			(선생님연설시간 : 코딩보다 생각이 먼저, 생각다음에 말하기연습하라함)

(resouerce)등을 전송하기 위해 
get, post ,put(수정), delete(삭제) → "restful api"
브라우저의 지원 상 get과 post만 주로 사용함

정적페이지 html css js
동적 jsp, servlet 으로 관리

reseource 전송을 위해 사용하는 4가지 restful api - get, post, put, delete
--------------------
---------------------
log4j.rootCategory=info, stdout, file
log4j.debug=false
#com.p6spy.engine.logging.P6LogFactory
#com.p6spy.engine.spy.appender.StdoutLogger
log4j.appender.stdout=com.p6spy.engine.spy.appender.StdoutLogger
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.ImmediateFlush=true
log4j.appender.stdout.Target=System.err
log4j.appender.stdout.layout.ConversionPattern=[%d] [%p] (%13F:%L) %3x - %m%n
log4j.appender.file.DatePattern = '.'yyyy-MM-dd
log4j.logger.com.mybatis.mapper.qnaMapper=TRACE
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=[%d] [%p] (%13F:%L) %3x - %m%n
log4j.logger.java.sql.Connection=INFO
log4j.logger.java.sql.Statement=INFO
log4j.logger.java.sql.PreparedStatement=INFO
log4j.logger.java.sql.ResultSet=INFO
---------------------
ㄴ저위에거
-----------------------
mvnrepository
https://mvnrepository.com/search?q=log4j
https://mvnrepository.com/artifact/log4j/log4j/1.2.17
view all
log4j-1.2.17.zip 
압축풀어서 log4j-1.2.17.jar 만 아래 디렉토리에 
D:\eclipse\workspace_jsp\basic0512\src\main\webapp\WEB-INF\lib

이클립스 켜서
->src-main-java-new file
log4j.properties 안에 저위에거 복붙

->wel.xml(web-inf)
 (<context-param></context-param> 부모태그 자손태그)
  <context-param>
  <param-name>log4jConfigLocation</param-name>
  <param-value>/WEB-INF/classes/log4j.properties</param-value>
  </context-param>

->
HelloServlet.java
public class HelloServlet extends HttpServlet {
	Logger logger = Logger.getLogger(HelloServlet.class);

	protected void doGet(HttpServletRequest  req, HttpServletResponse resp) throws ServletException, IOException {
		System.out.println("doGet"); //콘솔에 출력
		logger.info("doGet호출");
		logger.info("doGet호출");

--------------------------------------------------------
액셀
>쿠키런폰트설치
>RestAPI

>카카오 개발자 콘솔  https://developers.kakao.com/
카카오계정으로 로그인해서 회원가입
(react? 시간나면 해주신다고 함)
(자바 프로젝트>뉴파일 > 카카오API.txt > 키값 복붙)
어플리케이션 공간 만들고
내 애플리케이션>앱 설정> 플랫폼
Web
사이트 도메인	
http://localhost:9000
http://localhost:3000

kakao>developers>문서
--------------------------------------------------------


RestfulServlet 개념 기술면접 (알고있는 내용설명)
new Class -> RestfulServlet.java
get,post,put,delete


액셀 <요청과 응답 탭 167>
resp.setContentType("text/html;charset=utf-8");
mime type을 결정해주는 문장
브라우저 요청이 txt인지 이미지인지 어떤 타입인지


서블릿코드로 태그를 출력할 때 "" 붙여야함 - 서블릿으로 화면을 그리는것(html)은 좋지않음
서블릿은 사용자로부터 요청을 받는 용도로만 사용을 할 예정

ㅇ사		HttpServlet상속	Object상속		SQL
│용	→	    서블릿	   →	  Java 	→	SELECT		→	ORACLE DB(원기둥)
ㅅ자								FROM(집합)
								<DAO>
<WAS : Tomcat>
ID []
PW [] 
[로그인]
(클릭 이벤트처리 : JavaScript)

mem_id, mem_pw 이게 키가되는거고
값이 tomato , 1234
WAS 내장객체 request 요청객체 
사용자에게 요청을 듣고 싶을 때 사용

요청이 Servlet을통해 Tomcat에 전달됨

서블릿에 화면을 그리면 좋지 않기 때문에(후짐)
jsp(java+html,css,js) 여기에 응답 페이지 작성해서
서블릿에서 call 호출만 하기로함

----------------------------------------------------------------------------
개념설명




클라이언트(프론트엔드) | 서버(백엔드)

있을수도 있고 없을 수도 있음
     요청 xxx.jsp 	(→중요한 건 확장자가 아니라 mime type (mime type을 가지고 브라우저가 판단함))
요청에서는 main이 중요한 게 아니라
URL(주소창)로 전달 요청에 의해 web service는 시작됨
(uniform resource location : 리소스=자원 png, gif, txt, mp4, avi > mime type)
	↓

┌─────────→(요청)→ [서블릿] - UI는 작성하지 않음 (비효율적) 요청을 받는 용으로만 사용 	→	[JAVA]		→	(ORACLE)
	   			요청=듣기(req,res)응답=출력					jsp	←	 pure		←
	       		    get(파라미터)┘	└setContentType(mime type을 set)		│
     ┌────────페이지이동(응답은 jsp로부터)──────────────────────┘
         ↓	
	   		확장자가 .jsp인 파일도 자바코드인 것은 맞는데 	|	 java→class (컴파일)
	 		웹과 앱이 섞여있음 				|	
      						   jsp→java(서블릿)	|	
							jsp-api.jar	|	servlet-api.jar				
ㅇ사								컨테이너 / 엔진이 두개있다
│용	→	크롬(출력)					→ 서버사이드(Tomcat)
ㅅ자		브라우저					 JVM깔려있어야함
	브라우저는 mime 타입을 읽어서 어떤 문서인지 인식함	 S/W 가상의기계

								~내부적으로 일어나는 일~						
							JVM이 깔려있고 그 위에 WAS(Tomcat)
							그위에 jsp 자르랑 servelt자르(jar)
							압축방식은 zip이랑 같은데 안에 클래스가 있음
							메서드 추출하려면 인스턴스화
								

스프링 가기 전에 MVC 패턴을 개발방법론으로 공부할거임
1-1, 1-2, 1-3 수업 진행 후 스프링으로 넘어감
								

								
Restful API설명
----------------------------------------------------------------------------
*액셀 - 페이지이동
								
요청을받음
Servlet
↓	
ㅁ		ㅇ
톰캣서버	DB서버	select 1건 조회 /n건 조회 → list<Map> list<VO> : list 안에 또다른 오브젝트가 있는 구조
↓			테이블 구성, 구성요소 row, column 면일 때 데이터를 쓸 수 있다
			row가 한개가 아닌 여러개가 있음 
			클래스 하나에 변수를 여러개 선언할 수 있음 
			t 구조? 백팩(firstin lastout)
			list는 사람이고 map은 사람에 대한 정보들 
			list와 map은 Servlet이 가지고 있는데 jsp 페이지까지 유지가 되어야함 / Servlet과 jsp 유지의 문제

			
응답을 받는 것
jsp
