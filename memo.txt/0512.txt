전자정부 2022-03 이클립스
https://www.egovframe.go.kr/home/sub.do?menuNo=94

설정변경 ** workspace, build - 외부에서 파일 수정했을 때 새로고침 없이 자동저장



관리자권한으로 실행
압축풀고 이클립스만 d드라이브

이클립스 폴더 안에 워크스페이스폴더 생성 workspace_jsp
바탕화면에 바로가기생성 (작업표시줄에도 추가)

실행 후 워크스페이스 변경
D:\eclipse\workspace_jsp

서블릿 추가
file-new-dynamic web project 
project name : basic0512

target runtime > apache Tomcat 9.0
WAS(Web Application Server) 필요한 이유 : 웹서비스 제공을 위해서
물리적으로 설치된 위치 설정 전

cmd jvm 확인 /명령어 : java -version

톰캣 위치 설정, jdk 설정
next> 컴파일하는 위치 확인 > next > webapp에 html,css,js,jsp 등을 놔야 브라우저가 찾을 수 있음

web.xml은 배치 서술자(deployment descriptor) - DD - text/xml (메인타입/ 서브타입) 정확한건 mime type 찾아보기 
mime type으로 css인지 동영상인지 브라우저가 판단함
ㅁweb.xml 체크박스 추가 안해도 됨 
		└annotation이 등장하기 전까지는 web.xml을 사용했다. /annotation을사용한다는 뜻 
    ↓
클래스를 등록했다.
시스템에서 필요할 때 대신 인스턴스화를 해줌(게이른, 이른)

src>webapp>WEB-INF>web.xml 위치
 
webapp > new > other > web > jsp file > index.jsp

run on server
ㅁ자동실행 체크박스 
Apache - Tomcat 9.0
Server name : Tomcat v9 ServerLab
└배치, 배포 > 톰캣서버 밑에 프로젝트 basic0512 >webapp>index.jsp

포트번호 이미 사용 중일 경우 변경해야함 
servers > server.xml > 63번째줄 포트번호 변경 9000번으로 
변경 후 실행 

친구서버에 방문
cmd : ipconfig

서블릿에서는 메인메서드가 필요하지 않음 
웹으로 요청할 때는 uniform resouce lo? URL

아이피:포트번호/프로젝트이름/index.jsp
ㄴ 경로 오류 404

생략하고 접근 할 수 있도록 변경하려고함

서버더블클릭해서
2번째 체크박스 : publish module contexts to separate xml file
물리적 서버 위치를 바라보는게 아니라 복사본을 가지게 함
물리적 위치에 있는 server.xml과 구분되어 해당 프로젝트 환경에서는 변경된 내용을 따르게 함 
체크를 해서 구분 후 
모듈 > path /로 변경해줌 

웹서비스를 제공하기 위해서 톰캣을 설치함
톰캣을 설치할 때 응답, 요청 객체를 주입받을 수 있다 - 서버로부터
단, 웹서비스를 제공하기 위해서는 그냥 자바가 아니라 서블릿이어야 한다
웹서비스를 제공하기 위해서!
<server.xml 155번줄에서 변경할수도 있음>
ㄴ매번 프로젝트를 입력하는게 번거로우니 이 위치까지를 알도록 해주는 것

http://172.16.2.8:9000/basic0512/index.jsp
http://172.16.2.8:9000/index.jsp
-----------------------------------------------------
★★
-----------------------------------------------------
실행페이지에서 F12 모바일에서 보는 아이콘 체크
마우스 올리면 태그 영역 확인 가능
───────>index.jsp 작성<──────────────────────────────

-----------------------------------------------------
<!-- 
html 땅
문자열은 인라인 요소(<-> 블록 요소 : 자체 크기가 있음. 줄바꿈)
 -->
<%
	//스크립틀릿 - 자바땅 자바코드를 사용할 수 있다. -변수와 메서드
%>
	ㄴ변수와 메서드 사용을 위해서 인스턴스화 - 스프링은 자동으로 해줌 
-----------------------------------------------------
//스크립틀릿 안에 선언된 변수는 모두 지변이다.?
	ㄴ스크립틀릿을 여닫는 부분에서만 사용하는? 지변이 메서드 안에서 사용하는 거아닌가

jsp 확장자 안에 html과 자바 코드를 섞어쓰기...
부제 : 자바와 html의 섞어쓰기
-----------------------------------------------------
//이미 결정되었다는 무슨 말일까?

서블릿에서 태그를 작성할 수 있음
out.print("<div>")
출력(=응답 : response)

1)요청 (화면과 관계가 없음) **첫단추 : 요청 > 브라우저, URL(프로토콜 stateless / 상태를 보존하지 않음 쿠키를 써야 기억함)
2)응답 html, css (클라이언트 사이드)
-웹서비스의 기본컨셉-

변수 : 데이터 하나만 담을 수 있고, 타입이 일치해야 함
배열 
객체 배열 		
(배열은 끼워넣기가 안 됨)→리스트와 맵
제네릭 - 시간을 지배하지 못함
세션과 쿠키
-------------------------------------------------------
index.jsp Line1~2

서블릿은 확장자가 java이다?
jsp확장자는 html?
-------------------------------------------------------

index_jsp.java

서블릿은 태어나서 반납하는 과정을 거치게 되는데
우리가 작성하는 코드는 service메서드 안에 
메서드 안에 정의된 변수는 지역변수 
-> //스크립틀릿 안에 선언된 변수는 모두 지변이다.
───────>서블릿생성 <──────────────────────────────
클래스파일 생성 : name - HelloServlet.java
상속 추가 (Superclass)
new class > superclase - browse - 검색 https - httpservlet (톰캣을 가리킴)
-----------------------
설명
servlet-api.jar |  jsp-api.jar
	 	  ↑
 		Tomcat(WAS)
		   ↑
		JDK(S/W)

왜 톰캣안에 엔진이 두개?
(jar 엔진이라 부름? jar 안에 클래스가 있고 인스턴스화 하면 메모리에 올라가 메서드 호출하면 기능이 실제로 움직임)

index.jsp (java server page) 처리 주체는 브라우저가 아니라 톰캣 
.jsp가 .java로 바뀌어야함 → Servlet / 서블릿으로 바꾸는 일을 jsp-api.jar 가 해줌

index.jsp -> index_jsp.java // 서블릿이 되었다. (jsp-api.jar가 수행함)
->index_jsp.class  저장하면 컴파일 
	  (톰캣) 	└ 서블릿으로 작성해야만 함 

자바 ⊃ 서블릿 ⊃ jsp 


-----------------------
오버라이드 - doGet, doPost

D:\eclipse\workspace_jsp\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost\ROOT\org\apache\jsp

index_jsp.class
index_jsp.java 
ㄴ> Visual Studio Code 다운로드
Extension Pack for Java 확장팩설치
Spring initializr java support
gradle for java
JavaScript (ES6) code snippets
Auto Import
Auto Import - ES6, TS, JSX, TSX
Auto Rename Tag
GitLens — Git supercharged 
Community Material The 
CodeSnap
Eclipse Keymap
ES7+ React/Redux/React-Native snippets
ESLin
indent-rainbow
JavaScript REPL
Live Server
Lombok Annotations Support for VS Code
Material Icon Theme
Multiple cursor case preserve
Prettier - Code formatter
html tag wrapper
---------------------------------------------------------------------

jsp-api.jar / 엔진 혹은 컨테이너 / 압축을 풀면 클래스가 있음 
			↓
- 여기서만들어짐 : 약속 -> 메서드 오버라이딩 / 상속관계
init() 초기화
servlet() 서비스
destoy() 닫음
=>초기화 servlet lifecyle : 서블릿을 실행시킬때 → 브라우저에 요청(리퀘스트) url

ex
로그인
id ->입력  	→ 입력한 정보가 Tomcat 서버를 통과함 → 오라클서버(DB)
pw ->입력		

	WHERE 절에 ID=ture and PW=true -> 교집합
	지역변수처리
	LoginDao 
	1초에 1350명이 평균적으로 입장한다고 하면 인스턴스화 한걸 1350개 가지고 있어야 하는가?
	하나의 객체를 가지고 서비스를 하는 것 싱글톤 / 서블릿은 싱글톤임
	하나의 객체를 가지고 아이디와 비밀번호값이 달라지기 때문에 지역변수처리 해야함 


xx.jsp		(html, css, js) + JAVA  -> 섞어쓰기 / 한파일안에 담을 수 있음 
						어느 회사에 가서 톰캣 대신 다른 웹서버로 사용할 수 있는지 물어보면 
							(같은 역할을 할 수 있는)엔진이 있는지 확인해야함
xxx.html (only html, css, js 확장자만 올 수 있음)
xxx.do (서블릿) → 확장자 .java → 브라우저에 출력이 가능하다

System.out.pirnt() > 콘솔에 출력
out.print() > 브라우저에 출력
ㄴ첫글자 소문자 : 소문자를 적었을 때 에러가 나지는 않지만 클래스일 때는 대문자를 사용 → 첫글자 소문자? 변수라는 뜻
변수는 선언이 먼저임. 선언을 하지 않으면 NullpointException => XX 부지 (지어질 예정인 부지)
선언만 되어 있고 실체가 없다? new 를 하지 않으면 발생함

XXXServlet (HttpServlet을 상속 받았을 때)
│						요청을 받았을 때 (예를 들면 로그인 : 로그인버튼으로 ID,PW 전송-클라이언트에서 톰캣서버로)
│@Override					전송하는 방식 - GET, POST 
└get(1, 2) 
└post(1, 2) 
1-request
2-response(응답) → URL → 페이지 이동 (이동하는 API 공부) → 출력(html, css, js)

------------------------
HelloServlet
	protected void doGet(HttpServletRequest  req, HttpServletResponse resp) throws ServletException, IOException {
		System.out.println("doGet"); //콘솔에 출력
		resp.setContentType("text/html;charset=UTF-8");
		PrintWriter out = resp.getWriter();
		out.print("<h2>이순신</h2>"); //브라우저에 출력하려면 반드시 mime type이 필요함 안그러면 태그를 다 찍음
	}


─────────────────────────────────────────────────────────────
https://www.postman.com/
가입
https://www.postman.com/downloads/
다운

create workspace
collection
add request
get
key

http://localhost:9000/step1/hello?mem_id=tomato&mem_pw=123
&붙여서 2가지이상의 값을 넘길 수 있음
단위 테스트를 하기 위해서 postman을 설치했고 화면 없이 get,post방식의 테스트가 가능
url 주소 뒤쪽에 ?를 붙였을 경우에 key=(대입연산자)value 형태로 작성됨



─────────────────────────────────────────────────────────────
─────────────────────────────────────────────────────────────
반복

사용자가 회원가입해서 서비스를 제공받으려고함
id, pw 일치하는지 확인 (sql - select) , 주소바뀌었는지 (update), 삭제(delete) → DB서버 데이터처리 
** select가 중요함

Oracle DB까지 전달이 되어야함
ID,PW 입력 - 사용자

사용자가 시스템에 요구를 함 : request

doGet() 메서드가 파라미터로 받음
String id
String pw


index_jsp.java

서블릿은 태어나서 반납하는 과정을 거치게 되는데
우리가 작성하는 코드는 service메서드 안에 
메서드 안에 정의된 변수는 지역변수 
-> //스크립틀릿 안에 선언된 변수는 모두 지변이다.


─────────────────────────────────────────────────────────────


web 과 로컬에서 동작하는 것은 다름 
어떻게 다르냐면 
web → html, css(디자인), JS(이벤트, 동작 처리:자바스크리트)
	└이 세가지는 정적임 : 변하지 않고 쭉 감 
	Servlet, jsp 웹서비스를 배우기 위한 과목 → 네트워크가 있어야함 / 동적으로 바뀜
	정적 ↔ 동적 : 변함

Servlet (Server + applet(→java : 동적으로 서비스를 제공하려함 , applet이라는 api가 있음, api가 jdk)
웹에서 동작 : 브라우저 (인터프리터 : 브라우저가 이해할 수 있는 언어로 코딩 →  html, css, JS)

계층
View : id,pw 입력받음 → 화면구현 : html → 사용자입력 → servlet, jsp 전달 → select (변수-variable:column ex.아이디), 비밀번호 from (집합-테이블 ex.member) (sql 쿼리문)


최초의 사용자는 web에 요청(Request)를 함
HttpServlet 상속을 받으면 Servlet / 기존 자바는 Object를 상속받음-상속받지 않아도 기본 상위클래스
왜 Servlet인가?
java를 실행할때는 메인이 있어야 exe 실행파일로 만들 수 있음
web으로 실행하려면 브라우저 - 메인메소드가 필요한가 x - 필요한 것 : URL(uniform Resource location)을 통하여 브라우저로 요청
 요청내용 : ex.로그인 / 요청이라는 객체가 필요함 / 서블릿이 요청 request 과 response를 파라미터로 받아 doget, dopost 오버라이딩함
doget, dopost 오버라이딩 하여 사용하려면 정의되어 있는 서블릿을 사용해야함
-----------------------------------------------------------------------
★반복
url과 request요청 → 아래부분에 기재
-----------------------------------------------------------------------


로그인 하게되면 주문내역 등을 조회할 수 있음 → 인증필요 → 인증 : 로그인 → 아이디와 비밀번호 필요 → 변수선언 : 자바가상머신으로
문법적인 체크를 받기 이해서 JVM을 설치한 것
.java → .class 컴퓨터가 이해할 수 있는 언어

컴파일 브라우저 노출을 위해서 Tomcat (서버) 설치필요 
입력한 내용을 서버가 이해하기 위해서는 요청객체 (request) 필요
네트워크에서 동작을 할 때 필요한 것 http 프로토콜 - 통신, 소통 / https (s붙이려면 국가기관에 신고 및 인증 받아야함) 보안
비상태 프로토콜 : 상태가 유지되지 않음 / 상태를 관리하는게 필요함 
─────────────────────────────────────────────────────────────
-----------------------------------------------------------------------
★반복
url과 request요청


ㅇ<-< → ㅁ(브라우저)에 요청 	 │	
	클라이언트 사이드		  서버 사이드
처리 주체 : 브라우저 	      ←		server+applit 합성어 (서버에서 돌아가는 applit 그래서 servlet) : 서버에서 동작하는 자바코드 
		브라우저에서 나타낼수 있음 
	브라우저에서 동작한다는 것은 태그를 사용함 / 자바에서 태그를 사용? 태그
out.print("<div>")(브라우저에 사용, system은 로컬에 사용)

브라우저에 쓰기 가능 > 브라우저가 해석 : 인터프리터 > 톰캣 안에 서블릿 코드를 배치(사용)
사용자가 요청함 (요청은 객체-클래스라고 생각해도됨)
WAS가 톰캣이 요청을 주입해줌 → 클라이언트 사이드에 request 있음 
웹서비스의 시작은 요청		요청객체는 http 프로토콜을 사용, 메인메서드를 사용하지 않음, 웹으로 서비스 제공(크롬 등 브라우저로 받음)


웹서비스를 위해서는 서버가 필요함(WAS : Web Application Server) 이 안에는 요청 객체가 들어있음 request 
서버사이드에서 결정이 됨 - Servlet, jsp는 뿌리가 java임 

클라이언트 과목과 서버사이드 과목이 있음
Servlet은 서버사이드에 포함이 되어 있음
백엔드를 구성하려면 반드시 Tomcat이 필요함 왜냐하면 
Tomcat이 요청 객체를 주입해줌 

doGet 위에 @(어노테이션) Override라고 적혀있어 // 자바는 같음 이름의 메소드를 중복해서 정의할 수 있다. (오버로딩, 오버라이딩)
doGet(request, response) 
requset도 response 객체(클래스) 이다, 파라미터 자리에 옴 
doGet은 메서드 (동사) → 기능 // (명사)→ 변수


서블릿이 되기 위한 조건 - 반드시 상속을 받아야함 →  HTTPServlet을 상속 받으면 자바가 아니라 서블릿이 됨 
상속을 받는다 → 구현하는 클래스가 따로 존재한다 → 상속받아 재정의할 때 메소드 오버라이드라고 함 
서블릿 상속받아 오버라이드 해야하는 것 - doGet(), doPost() 메소드 
메소드 안에는 파라미터를 가질 수 있음 , 두개의 파라미터 - request, response가 옴
@오버라이드의 경우 파라미터의 개수를 바꿀 수 없음 - 약속되어 있기 때문.
doPost도 2개의 파라미터를 가질수 있음
파라미터 - 듣기 위한 부분 

html 태그를 이용하여 화면을 그려줌 → 사용자가 뭔가를 입력함 → 입력한 값을 받아오는 자리-파리미터 : request, response 선언만 되어있는 변수, 클래스타입으로 주소번지를 가지고 이씅ㅁ 
이러한 객체들은 그냥 사용하게 되면 NullPointException가 나타남, 선언만 하고 인스턴스화하지 않았을 때 / 인스턴스화 = 객체생성 
명사형인 변수와 동사형인 메소드를 (호출,활용) 누리기 위해서는 인스턴스화(객체생성) 해야함 
인스턴스화를 하면 주소번지를 갖고 있음, 이 주소번지를 가지고 메서드를 호출하거나 필드(변수)를 호출함

메서드의 괄호 안은 지변이 오는 자리(선언함)
반복 : doGet이나 doPost는 서블릿이 제공함, (HttpServlet)상속받았을 때 , 상속받으면 재정의할 수 있음, 구현체클래스
-----------------------------------------------------------------------
─────────────────────────────────────────────────────────────
-----------------------------------------------------------------------
★★
웹서비스를 제공하기 위해서 톰캣 서버를 설치함(응답 객체를 넣어주기위해) / 톰캣을 설치(플러그인)하면 상속을 받을 수 있음 / 설치안하면 NotFoud404
─────────────────────────────────────────────────────────────

